Author: Bjarne Stroustrup Edition: 4

Contents

Preface

Part I: Introductory Material

Preface

Describe language feature and standard-library component with Rationale, Specification and Examples.
Basic building blocks of elegant, correct, maintainable, and efficient C++ code.

Type-rich, lightweight abstractions. Suitable for software infrastructures.
C++ rewards the programmer who takes the time to master techniques for writing software code.
C++ is a language for someone who takes the task of programming seriously.

Stability -> code write today will still work a couple decades from now.

1. Know what latest (2011) ISO C++ standard has to offer.
2. What C++ provides beyond C.
3. Closer to machine (flexible? compile-time checking or better performance)

New in C++ 11 VS. 98.
A machine model suitable for modern computers with lots of concurrency.
C++'s design aims to be flexible and general.

[1] Principles and Practice Using C++.

Part I: Introductory Material
1. Notes to the Reader
Try not to get bogged down in details.
Chap 1 guide to the book and a bit of C++ background.
Chap 2-5 quick introduction
Chap 6-15 built-in types and the basic facilities
Chap 16-29 abstraction mechanisms and their use for oo and generic programming
Chap 30-44 overview of standard library and compatibility

Don't feel obliged to read chap 1 carefully.
Chap 2 model of memory, computation and error handling.
Chap 3 Abstraction mechanisms presents language features.
Chap 4 Containers and algorithms.
Chap 5 Concurrency and utilities.
A taste of C++.

[1] Caesar Augustus (BC 63 â€“ AD 14), was the first Roman emperor

Part II Basic facilities
Modularity - as supported by namespaces, source files and exception handling - is also discussed:
Chap 6 Types and declarations.
Chap 7 Pointers, Arrays, and References.
Chap 8 Structures, Unions, and Enumerations.
Chap 9 Statements.
Chap 10 Expressions.
Chap 11 Select operations.
Chap 12 Functions.
Chap 13 Exception handling. (with RAII)
Chap 14 Namespaces.
Chap 15 Source files and programs.

Java's resource management and exception handling are not integrated.

Part III Abstraction mechanisms
Classes, class hierarchies and templates.
Chap 16 Classes.
Chap 17 Construction, cleanup, copy, and move.
Chap 18 Operator overloading.
Chap 19 Special operators.

Classes:
Chap 20 Derived classes.
Chap 21 Class hierarchies.
Chap 22 Run-Time type information.
Parameterization:
Chap 23 Templates: class templates, function templates and template aliases.
Chap 24 Generic programming.
Chap 25 Specialization.
Chap 26 Instantiation.
Chap 27 Templates and hierarchies.
Chap 28 Metaprogramming.
Chap 29 A matric design.

The standard library
Chap 30 Standard-Library overview.
Chap 31 STL containers.
Chap 32 STL algorithms.
Chap 33 STL iterators.
Chap 34 Memory and resources.
Chap 35 Utilities.
Chap 36 Strings.
Chap 37 Regular expressions.
Chap 38 I/O streams.
Chap 39 Locales.
Chap 40 Numerics.
Chap 41 Concurrency.
Chap 42 Threads and tasks.
Chap 43 The C standard library.
Chap 44 Compatibility.

Examples and references
Bjarne's background in compilers, foundation libraries and simulations.
An understanding of design and programming techniques together with an appreciation of application domains.

The design of C++
Direct mappins of built-in operations and types to hardware.
Affordable and flexible abstraction mechanisms.
Systems programming means writing code that directly uses hardware resources, has serious resource constraints, or closely interacts with code that does.

[1] The design and evolution of C++ [Stroustrup, 1994]

Programming style
1. Procedural programming
   focused on processing and design of suitable data structures.
2. Data abstraction
   focused on design of interfaces.
3. Object-oriented programming
   focused on the design, implementation, and use of class hierarchies.
4. Generic programming
   focused on the design, implementation, and use of general algorithms.
   
Type Checking
C Compatibility
Knowing C is not a prerequisite for learning C++.
Every program in Kernighan and Richie, The C programming language, second edition, is a C++ program.

Language, libraries and systems.

Emphasizing on the support of effective combinations of those.

Learning C++
Focus on mastering the native and natural styles for that language - not on understanding every little detail of every language feature.
Writing program is essential; understanding a programming language is not just an intellectual exercise. Practical application of ideas is necessary.
Use languae features and library facilities in concert to support good programming styles in the context of sound designs.

Focus on fundamental concepts (such as type safety, resource management, and invariants) and programming techniques (such as resource management using scoped
objects and the user of iterators in algorithms) and not get lost in language-technical details.

Suggestions for C++ programmers

History
Language features and library facilities
My view is that we need every bit of help we can get from languages and tools: the inherent complexity of the systems we are trying to build
is always at the edge of what we can express.
The 1998 standard
